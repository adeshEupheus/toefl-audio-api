// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // schemas  = ["school", "test", "audio", "public"]
}

model Schools {
  id       String    @id @default(uuid())
  schoolName String @unique
  state String
  email String @unique
  city String
  address String
  pin String
  expireStart DateTime
  schoolCode String @unique
  expireAt DateTime
  salesRep String @default("null")
  user User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  @@schema("school")
}

model User {
  id       String    @id @default(uuid())
  fullName String
  userName String @unique
  email String @unique
  grade      Grade     @relation(fields: [gradeId], references: [id], onDelete: NoAction)
  gradeId String
  password String
  school      Schools     @relation(fields: [schoolId], references: [id], onDelete: NoAction)
  schoolId  String
  resetPasswordToken RestPasswordToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Grade {
  id       String    @id @default(uuid())
  grade Int @unique
  user User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests Test[]
}

model Admin {
   id       String    @id @default(uuid())
  name String
  loginCode String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id       String    @id @default(uuid())
  Title String
  audio Audio[]
  category String
  startTime DateTime
  endTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  grades Grade[]
  //  @@schema("test")
}

model Audio {
   id       String    @id @default(uuid())
  Title  String
  Url    String
  test      Test     @relation(fields: [TestId], references: [id], onDelete: Cascade)
  TestId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  @@schema("audio")
}


model RestPasswordToken {
  id       String    @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  token String
  expireTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
